{"mappings":"YAmIA,IAA6BA,EAAUC,EAAVD,EAuBT,QAvBmBC,EAehB,SAAAC,GACrBC,QAAQC,IAAIF,E,EAfZC,QAAQC,IAAI,qBAA8BC,OAATL,IAEjCM,YAAW,WAKPL,EAAU,gB,GAIX,I","sources":["src/form/form.js"],"sourcesContent":["// // Will run first\n// alert(\"First log\");\n\n// setTimeout(() => {\n//   // Will run last, after 2000 milliseconds\n//   alert(\"Second log\");\n// }, 2000);\n\n// // Will run second\n// alert(\"Third log\");\n\n\n// function onKeydown(){\n// const timerId = setTimeout(setT, 1500);\n// }\n\n// function setT() {\n//     console.log('laaaa')\n// }\n//////////////////////////\n\n// function onKeydown() {\n//     const timerId = setTimeout(() => {\n//         console.log('laaaa')\n//     }, 2000)\n//     console.log(timerId)\n// }\n\n// const onKeydown = () => {\n//   const timerId = setTimeout(() => {\n//     console.log(\"I love async JS!\");\n//   }, 2000);\n\n//   console.log(timerId);\n// };\n\n\n\n// window.addEventListener('keydown', onKeydown)\n///////////////////////////////////////////////\n// const isSuccess = true;\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     if (isSuccess) {\n//       resolve(\"Success! Value passed to resolve function\");\n//     } else {\n//       reject(\"Error! Error passed to reject function\");\n//     }\n//   }, 2000);\n// });\n\n// console.log(promise)\n\n/////////////////////////////////////////////////\n// const isSuccess = true;\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     if (isSuccess) {\n//       resolve(\"Success! Value passed to resolve function\");\n//     } else {\n//       reject(\"Error! Error passed to reject function\");\n//     }\n//   }, 2000);\n// });\n\n// // Will run first\n// console.log(\"Before promise.then()\");\n// // Registering promise callbacks\n// promise.then(\n//   // onResolve will run third or not at all\n//   value => {\n//     console.log(\"onResolve call inside promise.then()\");\n//     console.log(value); // \"Success! Value passed to resolve function\"\n//   },\n//   // onReject will run third or not at all\n//   error => {\n//     console.log(\"onReject call inside promise.then()\");\n//     console.log(error); // \"Error! Error passed to reject function\"\n//   }\n// );\n// // Will run second\n// console.log(\"After promise.then()\");\n\n//////////////////////////////////////////\n// const isSuccess = false;\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     if (isSuccess) {\n//       resolve(\"Success! Value passed to resolve function\");\n//     } else {\n//       reject(\"Error! Error passed to reject function\");\n//     }\n//   }, 2000);\n// });\n\n// promise\n//   .then(value => console.log(value)) // \"Success! Value passed to resolve function\"\n//   .catch(error => console.log(error)) // \"Error! Error passed to reject function\"\n//   .finally(() => console.log(\"Promise settled\")); // \"Promise settled\"\n\n///////////////////////////////////////////////////////////\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     resolve(5);\n//   }, 2000);\n// });\n\n// promise\n//   .then(value => {\n//     console.log(value); // 5\n//     return value * 2;\n//   })\n//   .then(value => {\n//     console.log(value); // 10\n//     return value * 3;\n//   })\n//   .then(value => {\n//     console.log(value); // 30\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   })\n//   .finally(() => {\n//     console.log(\"Final task\");\n//   });\n\n\n////////////////////////////////////////////////////////////\nconst fetchUserFromServer = (username, onSuccess, onError) => {\n  console.log(`Fetching data for ${username}`);\n\n  setTimeout(() => {\n    // Change value of isSuccess variable to simulate request status\n    const isSuccess = true;\n\n    if (isSuccess) {\n      onSuccess(\"success value\");\n    } else {\n      onError(\"error\");\n    }\n  }, 2000);``\n};\n\nconst onFetchSuccess = user => {\n  console.log(user);\n};\n\nconst onFetchError = error => {\n  console.error(error);\n};\n\nfetchUserFromServer(\"Mango\", onFetchSuccess, onFetchError);"],"names":["username","onSuccess","user","console","log","concat","setTimeout"],"version":3,"file":"form.6612654f.js.map"}